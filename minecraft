#!/bin/bash
# /etc/init.d/minecraft
# version 2013-04-23 (YYYY-MM-DD)

# advanced-minecraft-init-script - An initscript to start Minecraft or CraftBukkit
# Oryginal minecraft-init-script by Super Jamie <jamie@superjamie.net>
# Copyright (C) 2013 - Asda Pazda <asda.pazda1@gmail.com>

#### BEGIN INIT INFO 
# Provides: minecraft
# Required-Start: $local_fs $remote_fs
# Required-Stop: $local_fs $remote_fs
# Should-Start: $network
# Should-Stop: $network
# Default-Start: 2 3 4 5
# Default-Stop: 0 1 6
# Short-Description: Minecraft server
# Description: Starts the CraftBukkit Minecraft server
#### END INIT INFO 

## Settings
# reading settings script
# if you have moved it change path

source "/home/minecraft/SETTINGS"

# Source function library
## CentOS/Fedora
if [ -f /etc/rc.d/init.d/functions ]
 then
 . /etc/rc.d/init.d/functions
fi
## Ubuntu
if [ -f /lib/lsb/init-functions ]
 then
 . /lib/lsb/init-functions
fi

# Checking if mysql is running
if [ $MYSQL == 0 ]
  then
    while [ -z $(ps aux | grep -v grep | grep mysqld | awk '{print $2}') ]; do
      sleep 1
    done
fi

## Runs all commands as the non-root user

as_user() {
  ME=$(whoami)
  if [ $ME == $USERNAME ]
  then
    bash -c "$1"
  else
    su - $USERNAME -c "$1"
  fi
}

# Checking if file requested to mailing admins about errors exists

if [ ! -f $MCPATH/LAST.ERR ]
  then
    as_user "date +\"%Y-%m-%d %H:%M\" > $MCPATH/LAST.ERR"
fi

## Check if the server is running or not, and get PID if it is

server_running() {
  if ps ax | grep -v grep | grep -iv SCREEN | grep $SERVICE > /dev/null
  then
    PID=0
    PID="$(ps ax | grep -v grep | grep -iv SCREEN | grep $SERVICE | awk '{print $1}')"
    return 0
  else
    return 1
  fi
}


## Start the server executable as a service

mc_start() {
  if server_running
  then
    echo " * [ERROR] $SERVERNAME już działa! (pid $PID)" ##[ERROR] $SERVERNAME was already running! (pid $PID)
    exit 1
  else
    echo " * $SERVERNAME Nie działał. Uruchamiam..." ##$SERVERNAME was not already running. Starting...
    echo " * Używam mapy \"$WORLDNAME\"..." ##Using map named
    as_user "cd \"$MCPATH\" && screen -c /dev/null -dmS $SCRNAME $INVOCATION"
    sleep 10
    echo " * Sprawdzam $SERVERNAME czy działa..." ##Checking $SERVERNAME is running...

    if server_running
    then
      echo " * [OK] $SERVERNAME jest uruchomiony. (pid $PID)" ##[OK] $SERVERNAME is now running. (pid $PID)
    else
      echo " * [ERROR] Nie mogę uruchomić $SERVERNAME." ##[ERROR] Could not start $SERVERNAME.
      exit 1
    fi

  fi
}

## Stop the executable

mc_stop() {
  if server_running
  then
    echo " * $SERVERNAME jest uruchomiony (pid $PID). Zamykam..." ##$SERVERNAME is running (pid $PID). Commencing shutdown
    echo " * Powiadamiam użytkowników..." ##Notifying users of shutdown...
    as_user "screen -p 0 -S $SCRNAME -X eval 'stuff \"say Serwer zostanie wyłączony za 10 sec. Zapisywanie mapy...\"\015'" ##SERVER SHUTTING DOWN IN 10 SECONDS. Saving map
    echo " * Zapisuję mapę \"$WORLDNAME\" to disk..." ##Saving map named \"$WORLDNAME\" to disk
    as_user "screen -p 0 -S $SCRNAME -X eval 'stuff \"save-all\"\015'"
    sleep 10
    echo " * Zatrzymuję $SERVERNAME..." ##Stopping $SERVERNAME...
    as_user "screen -p 0 -S $SCRNAME -X eval 'stuff \"stop\"\015'"
    sleep 10
  else
    echo " * [ERROR] $SERVERNAME nie był uruchomiony!" ##[ERROR] $SERVERNAME was not running!
    exit 1
  fi

  if server_running
  then
    echo " * [ERROR] Nie udało się zatrzymać $SERVERNAME! Nadal działa..." ##[ERROR] $SERVERNAME could not be shutdown! Still running
    exit 1
  else
    echo " * [OK] $SERVERNAME został zatrzymany." ##$SERVERNAME is shut down
  fi
}

mc_forcestop() {
  if server_running
    then
      echo " * $SERVERNAME jest uruchomiony (pid $PID). Wyłączam siłą..." ##$SERVERNAME is running (pid $PID). Commencing force-shutdown
      echo " * Powiadamiam użytkowników..." ##Notifying users of shutdown...
      as_user "screen -p 0 -S $SCRNAME -X eval 'stuff \"say Serwer zostanie awaryjnie wyłączony za 10 sec.\"\015'" ##SERVER EMERGENCY SHUTTING DOWN IN 10 SECONDS. Saving map
      sleep 10
      echo " * Zatrzymuję $SERVERNAME..." ##Stopping $SERVERNAME...
      COUNTER=0
      MAX=9
      while [ true ]; do
        kill $PID
        COUNTER=$(($COUNTER+1))
        if [ ! server_running ]; then
          exit 0
        fi
        if [ "$COUNTER" -gt "$MAX" ]; then
          kill -9 $PID
          exit 0
        fi
      done
  fi
}

## Set the server read-only, save the map, and have Linux sync filesystem buffers to disk

mc_saveoff() {
  if server_running
  then
    echo " * $SERVERNAME jest uruchomiony, rozpoczynam procedure zapisywania..." ##$SERVERNAME is running. Commencing save
    echo " * Powiadamiam użytkowników..." ##Notifying users of save...
    sas_user "screen -p 0 -S $SCRNAME  -X eval 'stuff \"say Backup serwera, przechodzi w tryb odczytu ...\"\015'" ##SERVER BACKUP STARTING. Server going read-only
    echo " * Ustawiam serwer w trybie odczytu..." ##Setting server read-only...
    as_user "screen -p 0 -S $SCRNAME -X eval 'stuff \"save-off\"\015'"
    echo " * Zapisuję \"$WORLDNAME\"" ##Saving map named \"$WORLDNAME\" to disk...
    as_user "screen -p 0 -S $SCRNAME -X eval 'stuff \"save-all\"\015'"
    sync
    sleep 10
    echo " * [OK] Mapa zapisana." ##Map saved
  else
    echo " * [ERROR] $SERVERNAME nie był uruchomiony" ##$SERVERNAME was not running. Not suspending saves.
    exit 1
  fi
}

## Set the server read-write

mc_saveon() {
  if server_running
  then
    echo " * $SERVERNAME jest uruchomiony, umożliwiam zapisywanie..." ##$SERVERNAME is running. Re-enabling saves...
    as_user "screen -p 0 -S $SCRNAME -X eval 'stuff \"say Backup serwera zakończony...\"\015'" ##SERVER BACKUP ENDED. Server going read-write...
    as_user "screen -p 0 -S $SCRNAME -X eval 'stuff \"save-on\"\015'"
  else
    echo " * [ERROR] $SERVERNAME nie jest uruchomiony." ##$SERVERNAME was not running. Not resuming saves.
    exit 1
  fi
}

## Backs up map by rsyncing current world to backup location, creates tar.gz with datestamp

mc_backupmap() {
  echo " * Backapuje mapę \"$WORLDNAME\"..." ##Backing up $SERVERNAME map named \"$WORLDNAME\"...
  echo " * Synchronizuję \"$MCPATH/$WORLDNAME\" z \"$BACKUPPATH/$WORLDNAME\"" ##Syncing \"$MCPATH/$WORLDNAME\" to \"$BACKUPPATH/$WORLDNAME\"
  as_user "cd \"$MCPATH\" && rsync -cghLoprtu \"$WORLDNAME\" \"$BACKUPPATH\""
  sleep 10
  echo " * Kompresuję kopię..." ##Creating compressed backup...
  NOW="$(date +%Y-%m-%d.%H-%M-%S)"
  # Create a compressed backup file and background it so we can get back to restarting the server
  # You can tell when the compression is done as it makes an md5sum file of the backup
  as_user "cd \"$BACKUPPATH\" && tar cfz \"$WORLDNAME_backup_$NOW.tar.gz\" \"$WORLDNAME\" && md5sum \"$WORLDNAME_backup_$NOW.tar.gz\" > \"$WORLDNAME_backup_$NOW.tar.gz.md5\" &"
  # we can safely background the above command and get back to restarting the server
  echo " * [OK] Backup mapy zakończony." ##Backed up map.
}

## Backs up executable by copying it to backup location

mc_backupexe() {
  echo " * Backapuje plik wykonywalny serwera..." ##Backing up the $SERVERNAME server executable...
  as_user "cd \"$MCPATH\" && cp \"$SERVICE\" \"$BACKUPPATH/$SERVICE_backup_$NOW.jar\""
  echo " * [OK] Backup zakończony." ##Backed up executable
}

## Removes any backups older than 7 days, designed to be called by daily cron job

mc_removeoldbackups() {
  NUMBEROFBACKUPS="$(find \"$BACKUPPATH\" -name \"$WORLDNAME_backup*\" -type f -mtime +7 | wc -l)"
  if [ "$NUMBEROFBACKUPS" -ge 1 ]
  then
    echo " * Usuwam kopie zapasowe map starsze niż 7 dni ..." ##Removing map backups older than 7 days...
    as_user "cd \"$BACKUPPATH\" && find . -name \"$WORLDNAME_backup*\" -type f -mtime +7 | xargs rm -fv"
    echo " * Usunięto stare kopie zapasowe." ##Removed old map backups
  else
    echo " * Nie znalazłem nic do usunięcia" ##No map backups older than 7 days to remove.
  fi

  NUMBEROFEXES="$(find \"$BACKUPPATH\" -name \"$SERVICE_backup*\" -type f -mtime +7 | wc -l)"
  if [ "$NUMBEROFEXES" -ge 1 ]
  then
    echo " * Usuwam pliki wykonywalne serwera starsze niż 7 dni" ##Removing executable backups older than 7 days...
    as_user "cd \"$BACKUPPATH\" && find . -name \"$SERVICE_backup*\" -type f -mtime +7 | xargs rm -fv"
    echo " * Usunięto stare kopie." ##Removed old executable backups
  else
    echo " * Nie znalazłem nic do usunięcia." ##No executable backups older than 7 days to remove.
  fi
}

## Rotates logfile to server.1 through server.7, designed to be called by daily cron job

mc_logrotate() {
  # Server logfiles in chronological order
  LOGLIST=$(ls -r $MCPATH/server.log* | grep -v lck)
  # How many logs to keep
  COUNT=6
  # Look at all the logfiles
  for i in $LOGLIST; do
    LOGTMP=$(ls $i | cut -d "." -f 3)
    # If we're working with server.log then append .1
    if [ -z $LOGTMP ]
    then
      LOGTMP="$MCPATH/server.log"
      LOGNEW="$LOGTMP.1"
      as_user "/bin/cp $MCPATH/server.log $LOGNEW"
    # Otherwise, check if the file number is under $COUNT
    elif [ $LOGTMP -gt $COUNT ]
    then
      # If so, delete it
      as_user "rm -f $i"
    else
      # Otherwise, add one to the number
      LOGBASE=$(ls $i | cut -d "." -f 1-2)
      LOGNEW=$LOGBASE.$(($LOGTMP+1))
      as_user "/bin/cp $i $LOGNEW"
    fi
  done
  # Blank the existing logfile to renew it
  as_user "echo -n \"\" > $MCPATH/server.log"
}

## Display some extra environment informaton

mc_info() {
  if server_running
  then
    RSS="$(ps -p $PID --format rss | tail -n 1)"
    echo " - Ścieżka Javy              : $(readlink -f $(which java))" ##Java Path
    echo " - Komenda uruchomienia      : $INVOCATION" ##Start Command
    echo " - Ścieżka serwera           : $MCPATH" ## Server Path
    echo " - Nazwa świata              : $WORLDNAME" ##World Name
    echo " - ID procesu                : $PID" ##Process ID
    echo " - Sesja SCREEN              : $SCRNAME" ##Screen Session
    echo " - Użycie pamięci            : $[$RSS/1024] Mb ($RSS kb)" ##Memory Usage
    echo " - Aktywne połączenia        : " ##Active Connections
    netstat -tna | grep -E "Proto|$SERVERPORT"
  else
    echo " * $SERVERNAME nie był uruchomiony." ##$SERVERNAME is not running
    exit 1
  fi
}
 
## Connect to the active Screen session, disconnect with Ctrl+a then d

mc_console() {
  if server_running
  then
    TERMINAL=$(ps -p $$ | tail -n 1 | awk '{print $2}')
    chmod g+rw /dev/$TERMINAL
    as_user "screen -S $SCRNAME -dr"
  else
    echo " * [ERROR] $SERVERNAME nie jest uruchomiony" ##[ERROR] $SERVERNAME was not running!
    exit 1
  fi
}

mc_command() {
 if server_running
 then
  as_user "screen -p 0 -S $SCRNAME -X eval 'stuff \"$1\"\015'"
  as_user "tail -n 2 $MCPATH/server.log"
 else
  echo " * [ERROR] $SERVERNAME nie jest uruchomiony" ##[ERROR] $SERVERNAME was not running!
  exit 1
 fi
}

mc_checkerr() {
  if server_running
  then
    LASTERRDATE=$(cat $MCPATH/LAST.ERR) # Date of last Error
    LASTERRDATE=$(date -d "$LASTERRDATE" +%s) # Changing to sec
    NEWERRDATE=$(cat $MCPATH/server.log | grep "$WARNLVL" | awk '{print $1,$2}' | tail -n 1 | cut -c 1-16) # Searching in log for Error
    NEWERRDATESEC=$(date -d "$NEWERRDATE" +%s) # Changing to sec
    SCOPE=$((${LASTERRDATE}+300)) # skip errors in 5 min scope
    if [ $LASTERRDATE -ne $NEWERRDATESEC ] && [ $NEWERRDATESEC -ge $SCOPE ]; then
      as_user "echo \"$NEWERRDATE\" > $MCPATH/LAST.ERR" # Writing error date as newer error was found
      mc_sendmail
    fi
  else
    echo " * [ERROR] $SERVERNAME nie jest uruchomiony" ##[ERROR] $SERVERNAME was not running!
    exit 1 
  fi  
}

mc_sendmail() {
  if [ ! -z $(ps aux | grep -v grep | grep sendmail) ]; then
    if [ ! -z $EMAIL ]; then
      ERRORDATE=$(cat $MCPATH/LAST.ERR)
      ERROR=$(cat $MCPATH/server.log | grep $ERRORDATE)
      as_user "echo \"To: \"$EMAIL > $MCPATH/MAIL"
      as_user "echo \"Subject: Error dated \"$ERROR >> $MCPATH/MAIL"
      as_user "echo \"From: \"$SERVERNAME >> $MCPATH/MAIL"
      as_user "echo \"\" >> $MCPATH/MAIL"
      as_user "echo \"Error occured at: \"$ERROR >> $MCPATH/MAIL"
      as_user "sendmail -t < $MCPATH/MAIL" 
      as_user "rm $MCPATH/MAIL"  
    else
      exit 1
    fi
  fi
}

## These are the parameters passed to the script

case "$1" in
  start)
 mc_start
 ;;
  stop)
 mc_stop
 ;;
  forcestop)
 mc_forcestop
 ;;
  restart)
 mc_stop
 sleep 1
 mc_start
 ;;
  forcerestart)
 mc_forcestop
 sleep 1
 mc_start
 ;;
  backup)
 mc_saveoff
 mc_backupmap
 mc_backupexe
 mc_saveon
 ;;
  status)
 mc_info
 ;;
  info)
 mc_info
 ;;
  console)
 mc_console
 ;;
  command)
 mc_command "$2"
 ;;
# These are intended for cron usage, not regular users.
  removeoldbackups)
 mc_removeoldbackups
 ;;
  logrotate)
 mc_logrotate
 ;;
  checkerr)
 mc_checkerr  
 ;;
# Debug usage only
  justbackup) # don't use this while the server is running!!!
 mc_backupmap
 mc_backupexe
 ;;
  *)
 echo " * Usage: minecraft {start|stop|forcestop|restart|forcerestart|backup|info|console|command}"
 exit 1
 ;;
esac

exit 0